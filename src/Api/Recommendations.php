<?php
/**
 * Part of the Easyrec package.
 *
 * NOTICE OF LICENSE
 *
 * Licensed under the 3-clause BSD License.
 *
 * This source file is subject to the 3-clause BSD License that is
 * bundled with this package in the LICENSE file.
 *
 * @package    Easyrec
 * @version    0.0.1
 * @author     VerdeIT
 * @license    BSD License (3-clause)
 * @copyright  (c) 2017-2017, VerdeIT
 * @link       https://github.com/hafael/easyrec
 */

namespace Hafael\Easyrec\Api;


class Recommendations extends Api
{

    /**
     * Users who viewed the specified item also viewed the returned items. At most 15 items are returned, results are sorted by relevance.
     *
     * @param $sessionId
     * @param $itemId
     * @param null $itemType
     * @param null $requestedItemType
     * @param $userId
     * @param null $withProfile
     * @return array|mixed
     */
    public function othersUsersAlsoViewed($sessionId, $itemId, $itemType = null, $requestedItemType = null, $userId = null, $withProfile = null)
    {
        return $this->_get("otherusersalsoviewed", [
            "sessionid" => $sessionId,
            "itemid" => $itemId,
            "itemtype" => $itemType,
            "requesteditemtype" => $requestedItemType,
            "userid" => $userId,
            "withProfile" => $withProfile,
            "numberOfResults" => $this->getPerPage(),
            "offset" => $this->getOffset(),
        ]);
    }

    /**
     * Users who bought the specified item also bought the items returned by this method. At most 15 items are returned, results are sorted by relevance.
     *
     * @param $sessionId
     * @param $itemId
     * @param null $itemType
     * @param null $requestedItemType
     * @param $userId
     * @param null $withProfile
     * @return array|mixed
     */
    public function othersUsersAlsoBought($sessionId, $itemId, $itemType = null, $requestedItemType = null, $userId = null, $withProfile = null)
    {
        return $this->_get("otherusersalsobought", [
            "sessionid" => $sessionId,
            "itemid" => $itemId,
            "itemtype" => $itemType,
            "requesteditemtype" => $requestedItemType,
            "userid" => $userId,
            "withProfile" => $withProfile,
            "numberOfResults" => $this->getPerPage(),
            "offset" => $this->getOffset(),
        ]);
    }

    /**
     * Users who rated the specified item 'good' did the same with items returned by this method. At most 15 items are returned, results are sorted by relevance.
     *
     * @param $sessionId
     * @param $itemId
     * @param null $itemType
     * @param null $requestedItemType
     * @param $userId
     * @param null $withProfile
     * @return array|mixed
     */
    public function itemsRatedGoodByOtherUsers($sessionId, $itemId, $itemType = null, $requestedItemType = null, $userId = null, $withProfile = null)
    {
        return $this->_get("itemsratedgoodbyotherusers", [
            "sessionid" => $sessionId,
            "itemid" => $itemId,
            "itemtype" => $itemType,
            "requesteditemtype" => $requestedItemType,
            "userid" => $userId,
            "withProfile" => $withProfile,
            "numberOfResults" => $this->getPerPage(),
            "offset" => $this->getOffset(),
        ]);
    }

    /**
     * This API is used to return rules generated by easyrec Plugins. At most 15 items are returned, results are sorted by relevance.
     *
     * @param $sessionId
     * @param $itemId
     * @param null $itemType
     * @param null $requestedItemType
     * @param null $assocType
     * @param $userId
     * @param null $withProfile
     * @return array|mixed
     */
    public function relatedItems($sessionId, $itemId, $itemType = null, $requestedItemType = null, $assocType = null, $userId = null, $withProfile = null)
    {
        return $this->_get("relateditems", [
            "sessionid" => $sessionId,
            "itemid" => $itemId,
            "itemtype" => $itemType,
            "requesteditemtype" => $requestedItemType,
            "assocType" => $assocType,
            "userid" => $userId,
            "withProfile" => $withProfile,
            "numberOfResults" => $this->getPerPage(),
            "offset" => $this->getOffset(),
        ]);
    }

    /**
     * This recommendation shows items for a given user id. The latest items that where viewed by the given user are used to find related items of any
     * association type (also viewed, bought, etc., but also custom assoc type).
     * If a user has no viewing history or the viewed items have no related items an empty list is returned.
     * You might want to display other recommendations like most viewed items or most bought items of the last week to the user instead.
     * At most 15 items are returned, results are sorted by relevance.
     *
     * @param $sessionId
     * @param $actionType
     * @param $userId
     * @param null $requestedItemType
     * @param null $assocType
     * @param null $withProfile
     * @return array|mixed
     */
    public function recommendationsForUser($sessionId, $actionType, $userId, $requestedItemType = null, $assocType = null, $withProfile = null)
    {
        return $this->_get("recommendationsforuser", [
            "sessionid" => $sessionId,
            "actiontype" => $actionType,
            "userid" => $userId,
            "requesteditemtype" => $requestedItemType,
            "assocType" => $assocType,
            "withProfile" => $withProfile,
            "numberOfResults" => $this->getPerPage(),
            "offset" => $this->getOffset(),
        ]);
    }

    /**
     * This API is used to return the last actions performed by a user and can be used to present a browsing history for a user in a store.
     *
     * @param $sessionId
     * @param $actionType
     * @param $userId
     * @param null $requestedItemType
     * @param null $withProfile
     * @return array|mixed
     */
    public function actionHistoryForUser($sessionId, $actionType, $userId, $requestedItemType = null, $withProfile = null)
    {
        return $this->_get("actionhistoryforuser", [
            "sessionid" => $sessionId,
            "actiontype" => $actionType,
            "userid" => $userId,
            "requesteditemtype" => $requestedItemType,
            "withProfile" => $withProfile,
            "numberOfResults" => $this->getPerPage(),
            "offset" => $this->getOffset(),
        ]);
    }


}